package io.nick.plugin.better.coding.proxy;

import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.*;
import com.intellij.psi.javadoc.PsiDocComment;
import com.intellij.psi.javadoc.PsiDocToken;
import com.intellij.psi.util.PropertyUtil;

public class DtoField {
    public final DtoProxy dtoProxy;
    public final PsiField psiField;

    public DtoField(DtoProxy dtoProxy, PsiField psiField) {
        this.dtoProxy = dtoProxy;
        this.psiField = psiField;
    }

    public String getName() {
        return psiField.getName();
    }

    public String getNameWithPrefix(String prefix) {
        return StringUtil.isEmptyOrSpaces(prefix) ? getName() : prefix + StringUtil.capitalize(getName());
    }

    public PsiType getType() {
        return psiField.getType();
    }

    public PsiClass getContainingClass() {
        return psiField.getContainingClass();
    }

    public PsiMethod getGetter() {
        return PropertyUtil.findGetterForField(psiField);
    }

    public PsiMethod getSetter() {
        return PropertyUtil.findSetterForField(psiField);
    }

    public String getComment() {
        PsiDocComment comment = psiField.getDocComment();
        if (comment == null) {
            return null;
        }
        DtoFieldCommentExtractor extractor = new DtoFieldCommentExtractor();
        comment.accept(extractor);
        return extractor.comment.toString().trim();
    }

    public boolean isLogicalDeleteField() {
        String name = getName();
        return "markedAsDeleted".equals(name) || "is_deleted".equals(name) || "is_delete".equals(name);
    }

    private static class DtoFieldCommentExtractor extends JavaRecursiveElementVisitor {
        public final StringBuilder comment = new StringBuilder();
        @Override
        public void visitDocToken(PsiDocToken token) {
            if (token.getTokenType() != JavaDocTokenType.DOC_COMMENT_DATA) {
                super.visitDocToken(token);
                return;
            }
            String text = token.getText();
            if (text == null) {
                super.visitDocToken(token);
                return;
            }
            String trimmed = text.trim();
            boolean shouldIgnore = trimmed.isEmpty()
                || trimmed.equals("Database Column Remarks:")
                || trimmed.startsWith("This field was generated by")
                || trimmed.startsWith("This field corresponds to the database column")
                || trimmed.equals("<p>");
            if (shouldIgnore) {
                super.visitDocToken(token);
                return;
            }
            comment.append(text);
        }
    }

    @Override
    public int hashCode() {
        return psiField.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof DtoField && psiField.equals(((DtoField) obj).psiField);
    }
}
